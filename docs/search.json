{"Typealiases.html#/s:6Parsel1La":{"name":"L","abstract":"<p>L is the shortcut for Lexical namespace</p>"},"Structs/GenericParseError.html#/s:6Parsel17GenericParseErrorV7messageSSv":{"name":"message","abstract":"<p>the message of the error</p>","parent_name":"GenericParseError"},"Structs/GenericParseError.html#/s:s9EquatableP2eeoiSbx_xtFZ":{"name":"==(_:_:)","parent_name":"GenericParseError"},"Structs/GenericParseError.html":{"name":"GenericParseError","abstract":"<p>A generic error that occured while parsing</p>"},"Protocols.html#/s:6Parsel10ParseErrorP":{"name":"ParseError","abstract":"<p>Undocumented</p>"},"Functions/??(_:_:).html#/s:6Parsel2qqoiq_AA11ParseResultOyxq_G_q_yXKts8SequenceRzr0_lF1TL_xmfp":{"name":"T","parent_name":"??(_:_:)"},"Functions/==(_:_:).html#/s:6Parsel2eeoiSbAA11ParseResultOyxq_G_AEts9EquatableRzs8SequenceRzsAFR_r0_lF1TL_xmfp":{"name":"T","parent_name":"==(_:_:)"},"Functions/??(_:_:).html#/s:6Parsel2qqoiAA6ParserCyxq_GAE_AEyXKts8SequenceRzr0_lF1TL_xmfp":{"name":"T","parent_name":"??(_:_:)"},"Functions/??(_:_:).html#/s:6Parsel2qqoiAA6ParserCyxq_GAE_q_yXKts8SequenceRzr0_lF1TL_xmfp":{"name":"T","parent_name":"??(_:_:)"},"Functions/*(_:).html#/s:6Parsel1moPAA6ParserCyxSayq_GGADyxq_Gs8SequenceRzr0_lF1TL_xmfp":{"name":"T","parent_name":"*(_:)"},"Functions/+(_:).html#/s:6Parsel1poPAA6ParserCyxSayq_GGADyxq_Gs8SequenceRzr0_lF1TL_xmfp":{"name":"T","parent_name":"+(_:)"},"Functions/^^^(_:_:).html#/s:6Parsel3xxxoiAA6ParserCyxq0_GADyxq_G_q0_yXKts8SequenceRzr1_lF1TL_xmfp":{"name":"T","parent_name":"^^^(_:_:)"},"Functions/^^(_:_:).html#/s:6Parsel2xxoiAA6ParserCyxq0_GADyxq_G_q0_q_cts8SequenceRzr1_lF1TL_xmfp":{"name":"T","parent_name":"^^(_:_:)"},"Functions/>>(_:_:).html#/s:6Parsel2ggoiAA6ParserCyxq0_GADyxq_G_AEyXKts8SequenceRzr1_lF1TL_xmfp":{"name":"T","parent_name":">>(_:_:)"},"Functions/|(_:_:).html#/s:6Parsel1ooiAA6ParserCyxq_GAE_AEyXKts8SequenceRzr0_lF1TL_xmfp":{"name":"T","parent_name":"|(_:_:)"},"Functions/~(_:_:).html#/s:6Parsel1toiAA6ParserCyxq9__q_q0_q1_q2_q3_q4_q5_q6_q7_q8_tGADyxq9_G_ADyxq__q0_q1_q2_q3_q4_q5_q6_q7_q8_tGyXKts8SequenceRzr10_lF5TokenL_xmfp":{"name":"Token","parent_name":"~(_:_:)"},"Functions/~(_:_:).html#/s:6Parsel1toiAA6ParserCyxq__q0_q1_q2_q3_q4_q5_q6_q7_q8_q9_tGADyxq__q0_q1_q2_q3_q4_q5_q6_q7_q8_tG_ADyxq9_GyXKts8SequenceRzr10_lF5TokenL_xmfp":{"name":"Token","parent_name":"~(_:_:)"},"Functions/~(_:_:).html#/s:6Parsel1toiAA6ParserCyxq8__q_q0_q1_q2_q3_q4_q5_q6_q7_tGADyxq8_G_ADyxq__q0_q1_q2_q3_q4_q5_q6_q7_tGyXKts8SequenceRzr9_lF5TokenL_xmfp":{"name":"Token","parent_name":"~(_:_:)"},"Functions/~(_:_:).html#/s:6Parsel1toiAA6ParserCyxq__q0_q1_q2_q3_q4_q5_q6_q7_q8_tGADyxq__q0_q1_q2_q3_q4_q5_q6_q7_tG_ADyxq8_GyXKts8SequenceRzr9_lF5TokenL_xmfp":{"name":"Token","parent_name":"~(_:_:)"},"Functions/~(_:_:).html#/s:6Parsel1toiAA6ParserCyxq7__q_q0_q1_q2_q3_q4_q5_q6_tGADyxq7_G_ADyxq__q0_q1_q2_q3_q4_q5_q6_tGyXKts8SequenceRzr8_lF5TokenL_xmfp":{"name":"Token","parent_name":"~(_:_:)"},"Functions/~(_:_:).html#/s:6Parsel1toiAA6ParserCyxq__q0_q1_q2_q3_q4_q5_q6_q7_tGADyxq__q0_q1_q2_q3_q4_q5_q6_tG_ADyxq7_GyXKts8SequenceRzr8_lF5TokenL_xmfp":{"name":"Token","parent_name":"~(_:_:)"},"Functions/~(_:_:).html#/s:6Parsel1toiAA6ParserCyxq6__q_q0_q1_q2_q3_q4_q5_tGADyxq6_G_ADyxq__q0_q1_q2_q3_q4_q5_tGyXKts8SequenceRzr7_lF5TokenL_xmfp":{"name":"Token","parent_name":"~(_:_:)"},"Functions/~(_:_:).html#/s:6Parsel1toiAA6ParserCyxq__q0_q1_q2_q3_q4_q5_q6_tGADyxq__q0_q1_q2_q3_q4_q5_tG_ADyxq6_GyXKts8SequenceRzr7_lF5TokenL_xmfp":{"name":"Token","parent_name":"~(_:_:)"},"Functions/~(_:_:).html#/s:6Parsel1toiAA6ParserCyxq5__q_q0_q1_q2_q3_q4_tGADyxq5_G_ADyxq__q0_q1_q2_q3_q4_tGyXKts8SequenceRzr6_lF5TokenL_xmfp":{"name":"Token","parent_name":"~(_:_:)"},"Functions/~(_:_:).html#/s:6Parsel1toiAA6ParserCyxq__q0_q1_q2_q3_q4_q5_tGADyxq__q0_q1_q2_q3_q4_tG_ADyxq5_GyXKts8SequenceRzr6_lF5TokenL_xmfp":{"name":"Token","parent_name":"~(_:_:)"},"Functions/~(_:_:).html#/s:6Parsel1toiAA6ParserCyxq4__q_q0_q1_q2_q3_tGADyxq4_G_ADyxq__q0_q1_q2_q3_tGyXKts8SequenceRzr5_lF5TokenL_xmfp":{"name":"Token","parent_name":"~(_:_:)"},"Functions/~(_:_:).html#/s:6Parsel1toiAA6ParserCyxq__q0_q1_q2_q3_q4_tGADyxq__q0_q1_q2_q3_tG_ADyxq4_GyXKts8SequenceRzr5_lF5TokenL_xmfp":{"name":"Token","parent_name":"~(_:_:)"},"Functions/~(_:_:).html#/s:6Parsel1toiAA6ParserCyxq3__q_q0_q1_q2_tGADyxq3_G_ADyxq__q0_q1_q2_tGyXKts8SequenceRzr4_lF5TokenL_xmfp":{"name":"Token","parent_name":"~(_:_:)"},"Functions/~(_:_:).html#/s:6Parsel1toiAA6ParserCyxq__q0_q1_q2_q3_tGADyxq__q0_q1_q2_tG_ADyxq3_GyXKts8SequenceRzr4_lF5TokenL_xmfp":{"name":"Token","parent_name":"~(_:_:)"},"Functions/~(_:_:).html#/s:6Parsel1toiAA6ParserCyxq2__q_q0_q1_tGADyxq2_G_ADyxq__q0_q1_tGyXKts8SequenceRzr3_lF5TokenL_xmfp":{"name":"Token","parent_name":"~(_:_:)"},"Functions/~(_:_:).html#/s:6Parsel1toiAA6ParserCyxq__q0_q1_q2_tGADyxq__q0_q1_tG_ADyxq2_GyXKts8SequenceRzr3_lF5TokenL_xmfp":{"name":"Token","parent_name":"~(_:_:)"},"Functions/~(_:_:).html#/s:6Parsel1toiAA6ParserCyxq1__q_q0_tGADyxq1_G_ADyxq__q0_tGyXKts8SequenceRzr2_lF5TokenL_xmfp":{"name":"Token","parent_name":"~(_:_:)"},"Functions/~(_:_:).html#/s:6Parsel1toiAA6ParserCyxq__q0_q1_tGADyxq__q0_tG_ADyxq1_GyXKts8SequenceRzr2_lF5TokenL_xmfp":{"name":"Token","parent_name":"~(_:_:)"},"Functions/~(_:_:).html#/s:6Parsel1toiAA6ParserCyxq__q0_tGADyxq_G_ADyxq0_GyXKts8SequenceRzr1_lF5TokenL_xmfp":{"name":"Token","parent_name":"~(_:_:)"},"Functions/<~(_:_:).html#/s:6Parsel2ltoiAA6ParserCyxq0_GAE_ADyxq_GyXKts8SequenceRzr1_lF5TokenL_xmfp":{"name":"Token","parent_name":"<~(_:_:)"},"Functions/>~(_:_:).html#/s:6Parsel2gtoiAA6ParserCyxq0_GADyxq_G_AEyXKts8SequenceRzr1_lF5TokenL_xmfp":{"name":"Token","parent_name":">~(_:_:)"},"Functions/>~(_:_:).html":{"name":">~(_:_:)","abstract":"<p>Sequential conjunction of two parsers while ignoring the result of lhs</p>"},"Functions/<~(_:_:).html":{"name":"<~(_:_:)","abstract":"<p>Sequential conjunction of two parsers while ignoring the result of rhs</p>"},"Functions/~(_:_:).html":{"name":"~(_:_:)","abstract":"<p>Sequential conjunction of lhs and rhs with combining of the results in a tuple</p>"},"Functions/|(_:_:).html":{"name":"|(_:_:)","abstract":"<p>Convenience operator for &lsquo;or&rsquo; conjunction.</p>"},"Functions/>>(_:_:).html":{"name":">>(_:_:)","abstract":"<p>Convenience operator for &lsquo;then&rsquo; concatenation.</p>"},"Functions/^^(_:_:).html":{"name":"^^(_:_:)","abstract":"<p>Convenience operator for map operations.</p>"},"Functions/^^^(_:_:).html":{"name":"^^^(_:_:)","abstract":"<p>Convenience operator for map operation. Replaces the result of lhs with rhs"},"Functions/+(_:).html":{"name":"+(_:)","abstract":"<p>Convenience operator for atLeastOnce operation.</p>"},"Functions/*(_:).html":{"name":"*(_:)","abstract":"<p>Convenience oeprator for rep operation. (repetitive parsing.</p>"},"Functions/??(_:_:).html":{"name":"??(_:_:)","abstract":"<p>Convenience operator overload to use fallback on fail.</p>"},"Functions/==(_:_:).html":{"name":"==(_:_:)","abstract":"<p>Compares two ParseResults for equality"},"Extensions/String.html#/s:SS6ParselE1rAA11RegexParserCv":{"name":"r","abstract":"<p>Returns a RegexParser with self as the pattern</p>","parent_name":"String"},"Extensions/String.html":{"name":"String"},"Enums/Lexical/Error.html#/s:6Parsel7LexicalO5ErrorO15unexpectedTokenAESS8expected_SS3gottcAEmF":{"name":"unexpectedToken","abstract":"<p>an unexpected token occured</p>","parent_name":"Error"},"Enums/Lexical/Error.html":{"name":"Error","abstract":"<p>Errors that could occur while lexical parsing</p>","parent_name":"Lexical"},"Enums/Lexical.html#/s:6Parsel7LexicalO4charAA6ParserCySSs9CharacterVGvZ":{"name":"char","abstract":"<p>Parses one Character from a given String</p>","parent_name":"Lexical"},"Enums/Lexical.html#/s:6Parsel7LexicalO4charAA6ParserCySSs9CharacterVGAHFZ":{"name":"char(_:)","abstract":"<p>Parses a specific Character from a given String</p>","parent_name":"Lexical"},"Enums/Lexical.html#/s:6Parsel7LexicalO6stringAA6ParserCyS2SGSSFZ":{"name":"string(_:)","abstract":"<p>Parses a given String from a String.</p>","parent_name":"Lexical"},"Enums/Lexical.html#/s:6Parsel7LexicalO6stringAA6ParserCyS2SGSi6length_tFZ":{"name":"string(length:)","abstract":"<p>Parses a string with the given length</p>","parent_name":"Lexical"},"Enums/Lexical.html#/s:6Parsel7LexicalO5digitAA6ParserCySSSiGvZ":{"name":"digit","abstract":"<p>Parses a digit [0-9] from a given String</p>","parent_name":"Lexical"},"Enums/Lexical.html#/s:6Parsel7LexicalO11binaryDigitAA6ParserCySSSiGvZ":{"name":"binaryDigit","abstract":"<p>Parses a binary digit (0 or 1)</p>","parent_name":"Lexical"},"Enums/Lexical.html#/s:6Parsel7LexicalO12binaryNumberAA6ParserCySSSiGvZ":{"name":"binaryNumber","abstract":"<p>A parser for numbers of the format <code>0b10110110</code></p>","parent_name":"Lexical"},"Enums/Lexical.html#/s:6Parsel7LexicalO10octalDigitAA6ParserCySSSiGvZ":{"name":"octalDigit","abstract":"<p>Parses an octal digit (0 to 7)</p>","parent_name":"Lexical"},"Enums/Lexical.html#/s:6Parsel7LexicalO11octalNumberAA6ParserCySSSiGvZ":{"name":"octalNumber","abstract":"<p>A parser for numbers of the format <code>0o12372106</code></p>","parent_name":"Lexical"},"Enums/Lexical.html#/s:6Parsel7LexicalO16hexadecimalDigitAA6ParserCySSSiGvZ":{"name":"hexadecimalDigit","abstract":"<p>Parses a hexadecimal digit (0 to 15)</p>","parent_name":"Lexical"},"Enums/Lexical.html#/s:6Parsel7LexicalO17hexadecimalNumberAA6ParserCySSSiGvZ":{"name":"hexadecimalNumber","abstract":"<p>A parser for numbers of the format <code>0xdeadbeaf</code> or <code>0xDEADBEAF</code></p>","parent_name":"Lexical"},"Enums/Lexical.html#/s:6Parsel7LexicalO13decimalNumberAA6ParserCySSSiGvZ":{"name":"decimalNumber","abstract":"<p>Parses a decimal number</p>","parent_name":"Lexical"},"Enums/Lexical.html#/s:6Parsel7LexicalO6numberAA6ParserCySSSiGvZ":{"name":"number","abstract":"<p>Parses a number in hexadecimal, octal, binary or decimal format</p>","parent_name":"Lexical"},"Enums/Lexical.html#/s:6Parsel7LexicalO14floatingNumberAA6ParserCySSSdGvZ":{"name":"floatingNumber","abstract":"<p>Parses a floating number from String to Double (0.123; 0,123; …)</p>","parent_name":"Lexical"},"Enums/Lexical.html#/s:6Parsel7LexicalO4plusAA6ParserCySSs9CharacterVGvZ":{"name":"plus","abstract":"<p>Parses the <code>+</code> sign</p>","parent_name":"Lexical"},"Enums/Lexical.html#/s:6Parsel7LexicalO5minusAA6ParserCySSs9CharacterVGvZ":{"name":"minus","abstract":"<p>Parses the <code>-</code> sign</p>","parent_name":"Lexical"},"Enums/Lexical.html#/s:6Parsel7LexicalO8multiplyAA6ParserCySSs9CharacterVGvZ":{"name":"multiply","abstract":"<p>Parses the <code>*</code> sign</p>","parent_name":"Lexical"},"Enums/Lexical.html#/s:6Parsel7LexicalO6divideAA6ParserCySSs9CharacterVGvZ":{"name":"divide","abstract":"<p>Parses the <code>/</code> sign</p>","parent_name":"Lexical"},"Enums/Lexical.html#/s:6Parsel7LexicalO6assignAA6ParserCySSs9CharacterVGvZ":{"name":"assign","abstract":"<p>Parses the <code>=</code> sign</p>","parent_name":"Lexical"},"Enums/Lexical.html#/s:6Parsel7LexicalO5equalAA6ParserCyS2SGvZ":{"name":"equal","abstract":"<p>Parses the <code>==</code> sign</p>","parent_name":"Lexical"},"Enums/Lexical.html#/s:6Parsel7LexicalO5spaceAA6ParserCySSs9CharacterVGvZ":{"name":"space","abstract":"<p>Parses one space character</p>","parent_name":"Lexical"},"Enums/Lexical.html#/s:6Parsel7LexicalO7newLineAA6ParserCySSs9CharacterVGvZ":{"name":"newLine","abstract":"<p>Parses a new line <code>\\n</code> character</p>","parent_name":"Lexical"},"Enums/Lexical.html#/s:6Parsel7LexicalO14carriageReturnAA6ParserCySSs9CharacterVGvZ":{"name":"carriageReturn","abstract":"<p>Parses a new line <code>\\n</code> character</p>","parent_name":"Lexical"},"Enums/Lexical.html#/s:6Parsel7LexicalO3tabAA6ParserCySSs9CharacterVGvZ":{"name":"tab","abstract":"<p>Parses a tab <code>\\t</code> character</p>","parent_name":"Lexical"},"Enums/Lexical.html#/s:6Parsel7LexicalO13oneWhitespaceAA6ParserCySSs9CharacterVGvZ":{"name":"oneWhitespace","abstract":"<p>Parses exactly one whitespace</p>","parent_name":"Lexical"},"Enums/Lexical.html#/s:6Parsel7LexicalO11whitespacesAA6ParserCySSSays9CharacterVGGvZ":{"name":"whitespaces","abstract":"<p>Parses at least one whitespace</p>","parent_name":"Lexical"},"Enums/ParseResult.html#/s:6Parsel11ParseResultO7successACyxq_Gq_6result_x4resttcAEms8SequenceRzr0_lF":{"name":"success","abstract":"<p>Parse was successful.","parent_name":"ParseResult"},"Enums/ParseResult.html#/s:6Parsel11ParseResultO4failACyxq_GAA0B5Error_pcAEms8SequenceRzr0_lF":{"name":"fail","abstract":"<p>Parse was not successful.","parent_name":"ParseResult"},"Enums/ParseResult.html#/s:6Parsel11ParseResultO3mapACyxqd__Gqd__q__xtc1f_tlF":{"name":"map(f:)","abstract":"<p>Transforms the result with f, if successful.</p>","parent_name":"ParseResult"},"Enums/ParseResult.html#/s:6Parsel11ParseResultO7flatMapACyxqd__GAEq__xtc1f_tlF":{"name":"flatMap(f:)","abstract":"<p>Create a new ParseResult for the result.</p>","parent_name":"ParseResult"},"Enums/ParseResult.html#/s:6Parsel11ParseResultO9isSuccessSbyF":{"name":"isSuccess()","abstract":"<p>Checks whether or not the result is successful</p>","parent_name":"ParseResult"},"Enums/ParseResult.html#/s:6Parsel11ParseResultO8isFailedSbyF":{"name":"isFailed()","abstract":"<p>Checks whether or not the result is failed</p>","parent_name":"ParseResult"},"Enums/ParseResult.html#/s:6Parsel11ParseResultO6unwrapq_yKF":{"name":"unwrap()","abstract":"<p>Unwraps the result from the success case.</p>","parent_name":"ParseResult"},"Enums/ParseResult.html#/s:6Parsel11ParseResultO6unwrapq_q_yXK8fallback_tF":{"name":"unwrap(fallback:)","abstract":"<p>Unwraps the wrapped result and uses fallback if .fail(_)</p>","parent_name":"ParseResult"},"Enums/ParseResult.html#/s:6Parsel11ParseResultO4restxyKF":{"name":"rest()","abstract":"<p>Returns the rest of the parsing operation in success case.</p>","parent_name":"ParseResult"},"Enums/ParseResult.html#/s:6Parsel11ParseResultO5errorAA0B5Error_pyKF":{"name":"error()","abstract":"<p>Unwraps the error if not successful</p>","parent_name":"ParseResult"},"Enums/Errors.html#/s:6Parsel6ErrorsO21unwrappedFailedResultA2CmF":{"name":"unwrappedFailedResult","abstract":"<p>is thrown when <code>.unwrap()</code> is called on a failed ParseResult</p>","parent_name":"Errors"},"Enums/Errors.html#/s:6Parsel6ErrorsO25errorFromSuccessfulResultA2CmF":{"name":"errorFromSuccessfulResult","abstract":"<p>is thrown when <code>error()</code> is called on a succeeded ParseResult</p>","parent_name":"Errors"},"Enums/Errors.html#/s:6Parsel6ErrorsO28conjunctionOfEmptyCollectionA2CmF":{"name":"conjunctionOfEmptyCollection","abstract":"<p>is returned when <code>Parser.or</code> is called on an empty collection of parsers</p>","parent_name":"Errors"},"Enums/Errors.html#/s:6Parsel6ErrorsO19expectedAtLeastOnceA2CmF":{"name":"expectedAtLeastOnce","abstract":"<p>is returned when <code>atLeastOnce</code> failed because the parser succeeded not at all</p>","parent_name":"Errors"},"Enums/Errors.html#/s:6Parsel6ErrorsO15expectedAtLeastACSi_Si3gottcACmF":{"name":"expectedAtLeast","abstract":"<p>is returned when <code>atLeast(count:)</code> failed because the parser succeeded less than n</p>","parent_name":"Errors"},"Enums/Errors.html#/s:6Parsel6ErrorsO15expectedExactlyACSi_Si3gottcACmF":{"name":"expectedExactly","abstract":"<p>is returned when <code>exactly(count:)</code> failed because the parser succeeded less than or more than n</p>","parent_name":"Errors"},"Enums/Errors.html":{"name":"Errors","abstract":"<p>Generic errors that could occur on Core parsers</p>"},"Enums/ParseResult.html":{"name":"ParseResult","abstract":"<p>The result of a parse process.</p>"},"Enums/Lexical.html":{"name":"Lexical","abstract":"<p>Lexical is the namespace for Lexical parsers (you can also use shorthand L if you prefer)</p>"},"Classes/RegexParser/Error.html#/s:6Parsel11RegexParserC5ErrorO12doesNotMatchAESS7pattern_SS5inputtcAEmF":{"name":"doesNotMatch","abstract":"<p>Pattern does not match the input (at the beginning)</p>","parent_name":"Error"},"Classes/RegexParser/Error.html#/s:6Parsel11RegexParserC5ErrorO07invalidB0AESScAEmF":{"name":"invalidRegex","abstract":"<p>Regular expression is invalid (could not be evaluated by NSRegularExpression)</p>","parent_name":"Error"},"Classes/RegexParser/Error.html":{"name":"Error","abstract":"<p>Possible errors while using RegexParser</p>","parent_name":"RegexParser"},"Classes/RegexParser.html#/s:6Parsel11RegexParserC5regexSSv":{"name":"regex","abstract":"<p>The pattern of the parser</p>","parent_name":"RegexParser"},"Classes/RegexParser.html#/s:6Parsel11RegexParserCACSScfc":{"name":"init(_:)","abstract":"<p>Initialize a new RegexParser with a regular expression</p>","parent_name":"RegexParser"},"Classes/Parser.html#/s:6Parsel6ParserC13ParseFunctiona":{"name":"ParseFunction","abstract":"<p>ParseFunction is the type of the wrapped function type</p>","parent_name":"Parser"},"Classes/Parser.html#/s:6Parsel6ParserC5parseAA11ParseResultOyxq_Gxcv":{"name":"parse","abstract":"<p>The wrapped function, call to start the parsing process.</p>","parent_name":"Parser"},"Classes/Parser.html#/s:6Parsel6ParserCACyxq_GAA11ParseResultOyxq_Gxc5parse_tcfc":{"name":"init(parse:)","abstract":"<p>Initialize a parser with the given wrapping function.</p>","parent_name":"Parser"},"Classes/Parser.html#/s:6Parsel6ParserC4justACyxqd__Gqd__lFZ":{"name":"just(_:)","abstract":"<p>just creates a parser that parses the given value as success</p>","parent_name":"Parser"},"Classes/Parser.html#/s:6Parsel6ParserC4failACyxq_GAA10ParseError_p5error_tFZ":{"name":"fail(error:)","abstract":"<p>fail creates a parser that fails with the given error.</p>","parent_name":"Parser"},"Classes/Parser.html#/s:6Parsel6ParserC4failACyxq_GSS7message_tFZ":{"name":"fail(message:)","abstract":"<p>Creates a parser that always fails with a GenericParseError.</p>","parent_name":"Parser"},"Classes/Parser.html#/s:6Parsel6ParserC7flatMapACyxqd__GAEq_clF":{"name":"flatMap(_:)","abstract":"<p>Produce a new parser for every succeeded parsing process.</p>","parent_name":"Parser"},"Classes/Parser.html#/s:6Parsel6ParserC3mapACyxqd__Gqd__q_clF":{"name":"map(_:)","abstract":"<p>Produce a new parser which calls f on each successful parsing operation.</p>","parent_name":"Parser"},"Classes/Parser.html#/s:6Parsel6ParserC6filterACyxq_GAA10ParseError_pSgq_cF":{"name":"filter(_:)","abstract":"<p>Filter the result of the parser. Could be used for validation.</p>","parent_name":"Parser"},"Classes/Parser.html#/s:6Parsel6ParserC4thenACyxqd__GAEyXKlF":{"name":"then(_:)","abstract":"<p>Discards the result of self and executes other afterwards on the rest.</p>","parent_name":"Parser"},"Classes/Parser.html#/s:6Parsel6ParserC10typeErasedACyxytGv":{"name":"typeErased","abstract":"<p>Erases the type of the parser</p>","parent_name":"Parser"},"Classes/Parser.html#/s:6Parsel6ParserC8optionalACyxq_SgGv":{"name":"optional","abstract":"<p>Tries to parse self and consumes it if success.","parent_name":"Parser"},"Classes/Parser.html#/s:6Parsel6ParserC2orACyxq_GAEyXKF":{"name":"or(_:)","abstract":"<p>Concatenates the results of both parsers.</p>","parent_name":"Parser"},"Classes/Parser.html#/s:6Parsel6ParserC2orACyxq_Gqd__yXKs8SequenceRd__AE7ElementRtd__lF":{"name":"or(_:)","abstract":"<p>Concatenates the results of self + all given parsers.","parent_name":"Parser"},"Classes/Parser.html#/s:6Parsel6ParserC2orACyxq_Gqd__s10CollectionRd__AE7ElementRtd__lFZ":{"name":"or(_:)","abstract":"<p>Concatenates the results of given parsers with an or operation.","parent_name":"Parser"},"Classes/Parser.html#/s:6Parsel6ParserC8fallbackACyxq_Gq_yXKF":{"name":"fallback(_:)","abstract":"<p>Provides a fallback if the parser fails.</p>","parent_name":"Parser"},"Classes/Parser.html#/s:6Parsel6ParserC8fallbackACyxq_GAEyXKF":{"name":"fallback(_:)","abstract":"<p>Provides a fallback parser that is being used if self.parse fails.</p>","parent_name":"Parser"},"Classes/Parser.html#/s:6Parsel6ParserC11atLeastOnceACyxSayq_GGv":{"name":"atLeastOnce","abstract":"<p>Parses self repetitive with at least one success</p>","parent_name":"Parser"},"Classes/Parser.html#/s:6Parsel6ParserC11atLeastOnceACyxSayq_GGACyxqd__G3sep_tlF":{"name":"atLeastOnce(sep:)","abstract":"<p>Parses self repetitive with separator with at least one success</p>","parent_name":"Parser"},"Classes/Parser.html#/s:6Parsel6ParserC7atLeastACyxSayq_GGSi5count_tF":{"name":"atLeast(count:)","abstract":"<p>Parses self repetitive with at least <code>count</code> succeeds.</p>","parent_name":"Parser"},"Classes/Parser.html#/s:6Parsel6ParserC7exactlyACyxSayq_GGSi5count_tF":{"name":"exactly(count:)","abstract":"<p>Parses self exactly count times and return the results in an array</p>","parent_name":"Parser"},"Classes/Parser.html#/s:6Parsel6ParserC3repACyxSayq_GGv":{"name":"rep","abstract":"<p>Parses self repetitive and returns results in array</p>","parent_name":"Parser"},"Classes/Parser.html#/s:6Parsel6ParserC3repACyxSayq_GGACyxqd__G3sep_tlF":{"name":"rep(sep:)","abstract":"<p>Parses self repetitive separated by sep Parser.</p>","parent_name":"Parser"},"Classes/Parser.html":{"name":"Parser","abstract":"<p>A Parser parses sequences of T (Token) to one or multiple R (Result)</p>"},"Classes/RegexParser.html":{"name":"RegexParser","abstract":"<p>A parser that parses Strings with a given regular expression</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Enums.html":{"name":"Enums","abstract":"<p>The following enums are available globally.</p>"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Functions.html":{"name":"Functions","abstract":"<p>The following functions are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Structs.html":{"name":"Structs","abstract":"<p>The following structs are available globally.</p>"},"Typealiases.html":{"name":"Typealiases","abstract":"<p>The following typealiases are available globally.</p>"}}